#
# University of Pisa - Smart Application - 2022-2023
# Main docker-compose File
# Project: 4
#

version: '3.8'

services:

  # -------------------------------------------- #
  # Starting with API  Gateway                   #
  # -------------------------------------------- #

  gateway:
    #
    # API Gateway
    #
    # ! ! ! WARNING ! ! !
    # DO NOT set the container_name attribute and ports mapping
    # to allow the replication.
    #
    restart: always
    build: ./gateway
    # volumes:
    #   - ./gateway:/var/lib/postgresql/data
    expose:
      - "10004"
    env_file:
      - gateway.conf
    ports:
      - "10004:10004"
    environment:
      - USERS_MS_HOST=users_ms_worker
      - DATA_MANAGER_MS_HOST=data_manager_ms_worker
      - DATA_COLLECTOR_MS_HOST=data_collector_ms_worker
      - AI_MS_HOST=messages_ms_worker

  # -------------------------------------------- #
  # Users Microservice                           #
  # -------------------------------------------- #
  user_manager_db:
    image: postgres:13
    restart: unless-stopped
    volumes:
      - user_manager_db:/var/lib/postgresql/data
    env_file:
      - users_ms.conf
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "db", "-d", "user_manager_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  user_manager_ms_migrations:
    build: ./user-manager
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=user_manager_db
    command: sh -c "flask db init && flask db migrate && flask db upgrade"
    depends_on:
      data_manager_db:
        condition: service_healthy

  user_ms_worker:
    #
    # Users Microservice Worker node
    #
    container_name: user_manager
    build: ./user-manager
    restart: on-failure
    env_file:
      - users_ms.conf
    expose:
      - "10002"
    ports:
      - "10002:10002"
    environment:
      - POSTGRES_HOST=user_manager_db
    depends_on:
        user_manager_db:
          condition: service_healthy
        user_manager_ms_migrations:
          condition: service_started

  # -------------------------------------------- #
  # Data Manager Microservice                    #
  # -------------------------------------------- #

  data_manager_db:
    image: postgres:13
    restart: unless-stopped
    env_file:
      - data_manager_ms.conf
    volumes:
      - data_manager_db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "db", "-d", "data_manager_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
  
  data_manager_ms_migrations:
    build: ./data-manager
    env_file: 
      - data_manager_ms.conf
    environment:
      - POSTGRES_HOST=data_manager_db
    command: sh -c "flask db init && flask db migrate && flask db upgrade"
    depends_on:
      data_manager_db:
        condition: service_healthy

  data_ms_worker:
    #
    # Data Manager Microservice Worker node
    #
    container_name: data_manager
    build: ./data-manager
    restart: on-failure
    expose:
      - "10001"
    ports:
      - "10001:10001"
    env_file:
      - data_manager_ms.conf
    environment:
      - POSTGRES_HOST=data_manager_db
    depends_on:
      data_manager_db:
        condition: service_healthy  
      data_manager_ms_migrations:
        condition: service_started

  # -------------------------------------------- #
  # Artificial Intelligence Microservice         #
  # -------------------------------------------- #
  ai_ms_worker:
    build: ./artificial-intelligence
    restart: on-failure

    env_file:
      - artificial_intelligence_ms.conf
    expose:
      - "10003"
    ports:
      - "10003:10003"

    depends_on:
      data_ms_worker:
        condition: service_started

  # -------------------------------------------- #
  # Data Collector Microservice                  #
  # -------------------------------------------- #

  data_collector_ms_worker:
     #
     # Data Collector Microservice Worker node
     #
     build: ./data-collector
     restart: on-failure
     volumes:
       - ./data-collector:/var/lib/postgresql/data
     env_file:
       - data_collector_ms.conf
     expose:
       - "10005"
     ports:
       - "10005:10005"
     depends_on:
       user_ms_worker:
         condition: service_started
         
  # -------------------------------------------- #
  # Telegram Microservice                        #
  # -------------------------------------------- #
  telegram_ms_worker:
    build: ./telegram
    restart: on-failure

    env_file:
      - telegram_ms.conf
    expose:
      - "10006"
    ports:
      - "10006:10006"

    depends_on:
      data_ms_worker:
        condition: service_started

volumes:
  data_manager_db:
  user_manager_db:

#   static_contents:
#   # API Gateway static content volume